<?xml version="1.0" ?>

<!DOCTYPE article SYSTEM "/usr/share/sgml/docbook/dtd/xml/4.5/docbookx.dtd">


<article status="draft" class="specification"> <title>Enhanced Discrete Events System framework (graph based). Requirements.</title>

    <articleinfo>
	<author><personname><firstname>Yuri</firstname><surname>Borisov</surname></personname>
	    <email>yuri.borisov.v@gmail.com</email></author> 

	<releaseinfo>Ver.0.14 at 26-Nov-2014</releaseinfo>

	<abstract>
	    <simpara>This document collects use-cases and software requirements for Discrete Events System framework ver 2.</simpara>
	</abstract>

	<revhistory>
	    <revision> <revnumber>0.01</revnumber> <date>30-Nov-2011</date> <authorinitials>Yuri Borisov</authorinitials>
		<revremark>Initial version</revremark> </revision>
	    <revision> <revnumber>0.02</revnumber> <date>19-Mar-2013</date> <authorinitials>Yuri Borisov</authorinitials>
		<revremark>Added <xref linkend="uc_03"/></revremark> </revision>
	    <revision> <revnumber>0.03</revnumber> <date>28-Mar-2013</date> <authorinitials>Yuri Borisov</authorinitials>
		<revremark>Added <xref linkend="uc_grahp_04"/></revremark> </revision>
	    <revision> <revnumber>0.04</revnumber> <date>11-Jan-2014</date> <authorinitials>Yuri Borisov</authorinitials>
		<revremark>Added <xref linkend="uc_022"/>, <xref linkend="uc_024"/>, <xref linkend="uc_025"/></revremark> </revision>
	    <revision> <revnumber>0.05</revnumber> <date>12-Jan-2014</date> <authorinitials>Yuri Borisov</authorinitials>
		<revremark>Added <xref linkend="uc_026"/>, <xref linkend="uc_027"/></revremark> </revision>
	    <revision> <revnumber>0.06</revnumber> <date>10-Feb-2014</date> <authorinitials>Yuri Borisov</authorinitials>
		<revremark>Added <xref linkend="uc_028"/></revremark> </revision>
	    <revision> <revnumber>0.07</revnumber> <date>21-Feb-2014</date> <authorinitials>Yuri Borisov</authorinitials>
		<revremark>Added <xref linkend="uc_029"/></revremark> </revision>
	    <revision> <revnumber>0.08</revnumber> <date>07-Mar-2014</date> <authorinitials>Yuri Borisov</authorinitials>
		<revremark>Added <xref linkend="uc_031"/>, <xref linkend="uc_032"/>, <xref linkend="uc_033"/>, <xref linkend="uc_034"/>, <xref linkend="uc_035"/></revremark> </revision>
	    <revision> <revnumber>0.09</revnumber> <date>15-Jun-2014</date> <authorinitials>Yuri Borisov</authorinitials>
		<revremark>Added <xref linkend="uc_037"/>, <xref linkend="uc_038"/></revremark> </revision>
	    <revision> <revnumber>0.10</revnumber> <date>21-Jun-2014</date> <authorinitials>Yuri Borisov</authorinitials>
		<revremark>Added <xref linkend="uc_039"/>, <xref linkend="uc_040"/></revremark> </revision>
	    <revision> <revnumber>0.11</revnumber> <date>23-Jul-2014</date> <authorinitials>Yuri Borisov</authorinitials>
		<revremark>Added <xref linkend="uc_041"/></revremark> </revision>
	    <revision> <revnumber>0.12</revnumber> <date>30-Jul-2014</date> <authorinitials>Yuri Borisov</authorinitials>
		<revremark>Added <xref linkend="uc_042"/>, <xref linkend="uc_043"/></revremark> </revision>
	    <revision> <revnumber>0.13</revnumber> <date>06-Aug-2014</date> <authorinitials>Yuri Borisov</authorinitials>
		<revremark>Added <xref linkend="uc_044"/></revremark> </revision>
	    <revision> <revnumber>0.13</revnumber> <date>09-Aug-2014</date> <authorinitials>Yuri Borisov</authorinitials>
		<revremark>Added <xref linkend="uc_045"/></revremark> </revision>
	    <revision> <revnumber>0.14</revnumber> <date>26-Nov-2014</date> <authorinitials>Yuri Borisov</authorinitials>
		<revremark>Added <xref linkend="uc_046"/></revremark> </revision>
	</revhistory>

    </articleinfo>

    <bibliolist>
	<title>References</title>
    </bibliolist>

    <sect1 id="nimp"><title>Treaceability: not implemented yet</title>
	<itemizedlist>
	    <listitem> <xref linkend="uc_034"/> </listitem>
	    <listitem> <xref linkend="uc_031"/> </listitem>
	    <listitem> <xref linkend="uc_030"/> </listitem>
	    <listitem> <xref linkend="uc_028"/> </listitem>
	    <listitem> <xref linkend="uc_027"/> </listitem>
	    <listitem> <xref linkend="uc_025"/>, ref discussion <xref linkend="uc_025_disc_notsec"/> </listitem>
	    <listitem> <xref linkend="uc_024"/> </listitem>
	    <listitem> <xref linkend="uc_010"/> </listitem>
	    <listitem> <xref linkend="uc_014"/> </listitem>
	</itemizedlist>
    </sect1>

    <sect1 id="trac_impl"><title>Treaceability: implemented</title>
	<itemizedlist>
	    <listitem> <xref linkend="uc_029"/>, via marking removed node as deleted but keeping it in runtime model </listitem>
	</itemizedlist>
    </sect1>
    
    <sect1 id="uc"> <title>Use cases</title>

	<sect2 id="uc_000"><title>UC_000 Usecase template</title>
	    <sect3><title>Actors</title>
		CLIENT: some element of system - also named "interface requestor".
	    </sect3>
	    <sect3><title>Preconditions</title>
	    </sect3>
	    <sect3><title>Assumptions</title>
	    </sect3>
	    <sect3><title>Normal</title>
		<simpara>Normal flow</simpara>
	    </sect3>
	    <sect3><title>Alternative</title>
		<simpara>Alternative flows</simpara>
	    </sect3>
	    <sect3><title>Exceptions</title>
	    </sect3>
	    <sect3><title>Variations</title>
	    </sect3>
	    <sect3><title>Extends</title>
	    </sect3>
	    <sect3><title>Extended by</title>
		<itemizedlist>
		    <listitem></listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Discussion</title>
	    </sect3>
	    <sect3><title>Clarification</title>
	    </sect3>
	</sect2>

	<sect2 id="uc_001"><title>UC_001 Logging</title>
	    <sect3><title>Description</title>
		CLIENT requests logging and specifies logging parameters - SYSTEM provides CLIENT with logging data
	    </sect3>
	    <sect3><title>Extension of</title>
	    </sect3>
	    <sect3><title>Extended by</title>
		<itemizedlist>
		    <listitem><xref linkend="uc_020"/></listitem>
		    <listitem><xref linkend="uc_047"/></listitem>
		    <listitem><xref linkend="uc_048"/></listitem>
		</itemizedlist>
	    </sect3>
	</sect2>

	<sect2 id="uc_020"><title>UC_020 Logging configuration of element</title>
	    <sect3><title>Description</title>
		CLIENT selects some particular element and requests logging configuration - SYSTEM provides CLIENT with means of 
		logging configuration.
	    </sect3>
	    <sect3><title>Extension of</title>
		<simpara><xref linkend="uc_001"/></simpara>
	    </sect3>
	    <sect3><title>Extended by</title>
	    </sect3>
	</sect2>

	<sect2 id="uc_021"><title>UC_021 Getting parent nodes available.</title>
	    <sect3><title>Description</title>
		CLIENT requests adding new graph node into the graph - SYSTEM offers the following ways to do this:
		<itemizedlist>
		    <listitem>From the current graphs loaded in environment by specifyinc local URI </listitem>
		    <listitem>From external graph by specifying full URI (URI includes graph spec and node within the spec)</listitem>
		    <listitem>From graph provider</listitem>
		</itemizedlist>
	    </sect3>
	</sect2>

	<sect2 id="uc_002"><title>UC_002 Creation from spec</title>
	    <sect3><title>Description</title>
		CLIENT requests creation of graph by spec - SYSTEM creates the graph using the spec given.
	    </sect3>
	    <sect3><title>Extentended by</title>
		<itemizedlist>
		    <listitem><xref linkend="uc_017"/></listitem>
		    <listitem><xref linkend="uc_016"/></listitem>
		    <listitem><xref linkend="uc_045"/></listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Discussion</title>
		<orderedlist>
		    <listitem>Actually the spec is the sequence of the changes (mutations) of system. </listitem>
		</orderedlist>
	    </sect3>
	</sect2>

	<sect2 id="uc_017"><title>UC_017 Spec of creation </title>
	    <sect3><title>Description</title>
		Graph spec consists of:
		<itemizedlist>
		    <listitem>Name</listitem>
		    <listitem>Parent</listitem>
		    <listitem>Mutations</listitem>
		</itemizedlist>
		<simpara>The mutation can be as:</simpara>
		<itemizedlist>
		    <listitem>Adding node</listitem>
		    <listitem>Removing node</listitem>
		    <listitem>Renaming node</listitem>
		    <listitem>Changing content of node</listitem>
		</itemizedlist>
		<simpara>The spec can be consider as "chromosome" of a graph. The spec can </simpara>
	    </sect3>
	    <sect3><title>Extends</title>
		<xref linkend="uc_002"/>
	    </sect3>
	    <sect3><title>Extentions</title>
		<itemizedlist>
		    <listitem><xref linkend="uc_018"/></listitem>
		    <listitem><xref linkend="uc_026"/></listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Discussion</title>
		<simpara>In fact the spec can be considered as series of mutation, because of adding node with given name and parent also is mutation of upper level node in the native hierarchy.</simpara>
	    </sect3>
	</sect2>

	<sect2 id="uc_023"><title>UC_023 Serialization as spec</title>
	    <sect3><title>Description</title>
		CLIENT requests serialization - SYSTEM serialize the graph as graph spec, CLIENT request re-creating SYSTEM from serialized spec (de-serialization) - SYSTEM is re-created.
	    </sect3>
	    <sect3><title>Extends</title>
		<xref linkend="uc_002"/>
	    </sect3>
	    <sect3><title>Extentions</title>
		<itemizedlist>
		    <listitem><xref linkend="uc_017"/></listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Discussion</title>
		<simpara></simpara>
	    </sect3>
	</sect2>

	<sect2 id="uc_grahp_04"><title>UC_GRAHP_04 Providing ifaces</title>
	    <sect3><title>Description</title>
		CLIENT requests element for some interface - SYSTEM ensures elements providing interface or indicates that the interface 
		cannot be provided.
	    </sect3>
	    <sect3><title>Details</title>
		<itemizedlist>
		    <listitem>The corporative approach is to be used, so element can provide not only "it's owned" interface but 
			also interface provided by elements that "cooperate" to it.</listitem>
		    <listitem>The policy of providing interface in cooperative network is to be defined</listitem>
		</itemizedlist>
	    </sect3>
	</sect2>

	<sect2 id="uc_03"><title>UC_03 Connection</title>
	    <sect3><title>Description</title>
		CLIENT requests connecting two systems - SYSTEM allows connecting systems so one system gets able to communicate to another.
	    </sect3>
	    <sect3><title>Details</title>
		<itemizedlist>
		    <listitem>System contains end points for connection. Connection is established via creating relation between
			end points of two systems. Such connection endpoints are called Connection points (CP).</listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Extension of</title>
	    </sect3>
	    <sect3><title>Extended by</title>
		<itemizedlist>
		    <listitem><xref linkend="uc_06"/></listitem>
		    <listitem><xref linkend="uc_012"/></listitem>
		    <listitem><xref linkend="uc_015"/></listitem>
		</itemizedlist>
	    </sect3>
	</sect2>

	<sect2 id="uc_06"><title>UC_06 Extention</title>
	    <sect3><title>Description</title>
		CLIENT requests to exhibit iface of  some internal component of the system - SYSTEM provides this via having CP that on 
		one hand serves as end point for connection from external system but on the oner hand is connected to internal component.
		Such connection point is called Extention Point (EP).
	    </sect3>
	    <sect3><title>Details</title>
		<itemizedlist>
		    <listitem>. </listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Extension of</title>
		<itemizedlist>
		    <listitem><xref linkend="uc_03"/></listitem>
		</itemizedlist>
	    </sect3>
	</sect2>

	<sect2 id="uc_007"><title>UC_007 CPs providing interfaces</title>
	    <sect3><title>Description</title>
		CLIENT requests CP for some interface - CP provides only interface that is specified as provided.
	    </sect3>
	    <sect3><title>Details</title>
		<itemizedlist>
		    <listitem>There is no possibility for CLIENT to obtains some other interface of system via the CP. </listitem>
		    <listitem>Is this constraint really needed? In fact the connecting policies avoid connecing incompatible CP.
			The only problem can be access through C interface.</listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Extension of</title>
	    </sect3>
	    <sect3><title>Extended by</title>
		<itemizedlist>
		    <listitem><xref linkend="uc_008"/></listitem>
		    <listitem><xref linkend="uc_009"/></listitem>
		    <listitem><xref linkend="uc_010"/></listitem>
		</itemizedlist>
	    </sect3>
	</sect2>

	<sect2 id="uc_008"><title>UC_008 CPs providing multiple instances of interfaces</title>
	    <sect3><title>Description</title>
		CLIENT requests CP for instances of some interface - CP provides available instances of specified  interface.
	    </sect3>
	    <sect3><title>Details</title>
		<itemizedlist>
		    <listitem>One important case is when some system internal component requests ifaces from system connection point. 
			Multiple connection to that point are allowed. So the requiest shall result in returning the set of iface 
			implementations.
		    </listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Extension of</title>
		<xref linkend="uc_007"/>
	    </sect3>
	    <sect3><title>Extended by</title>
		<itemizedlist>
		</itemizedlist>
	    </sect3>
	</sect2>

	<sect2 id="uc_009"><title>UC_009 Caching of Interfaces</title>
	    <sect3><title>Description</title>
		CLIENT: some element of system.
		CLIENT requests some element for interface - SYSTEM (requested element) returns the interface (or instances of 
		interface) and also caches the ifaces. CLIENT requests SYSTEM for the same interface - SYSTEM returns the
		cached instances of interface.
	    </sect3>
	    <sect3><title>Details</title>
		<itemizedlist>
		    <listitem> </listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Extension of</title>
		<xref linkend="uc_007"/>
	    </sect3>
	    <sect3><title>Extended by</title>
		<itemizedlist>
		</itemizedlist>
	    </sect3>
	</sect2>

	<sect2 id="uc_010"><title>UC_010 Interface requestor being notified of interface added/removed</title>
	    <sect3><title>Description</title>
		CLIENT: some element of system - also named "interface requestor".
		CLIENT requests SYSTEM for interface - SYSTEM returns the interface (or instances of 
		interface). Some new interface that meets the request has been added or some current interfaces are removed - SYSTEM notifies CLIENT of that, so
		CLIENT can request refreshing interfaces in cache.
	    </sect3>
	    <sect3><title>Details</title>
		<itemizedlist>
		    <listitem> </listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Extension of</title>
		<xref linkend="uc_007"/>
	    </sect3>
	    <sect3><title>Extended by</title>
		<itemizedlist>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Discussion</title> 
		<simpara>Currently (git sha 82c1940cf4402d5ca89eaea7cd69ab9b7b74fc97 at 20140526) this mechanism is implemeted only partially: for vertex the cache is
		    invalidated when vertexes connections got changed. But this invalidation is not propagated properly. This is outlined on the figure below. Let's assume the 
		    iface requestor is node requesting to connpoint [CP1] and [CP1] cache contains some ifaces for this request.
		    Then if [Ext1] and [Ext2] get connected via [E1] then the only [Ext1] and [Ext2] ifcaches will be invalidated,
		    but not the cache of [CP1], so [CP1] will not provide ifaces from [Ext1].</simpara>
		<figure id="fig_ifcache_inval"><imageobject> <imagedata fileref="pics/pic_req_ifcache_inval.png"/> </imageobject></figure>
	    </sect3>
	</sect2>

	<sect2 id="uc_005"><title>UC_005 Sockets</title>
	    <sect3><title>Description</title>
		CLIENT requests connection of endpoints that are more complex that single CP - SYSTEM provides the means of connecting in 
		form of socket.
	    </sect3>
	    <sect3><title>Details</title>
		<itemizedlist>
		    <listitem>Socket is element that contains other CPs, or sockets. So socket can be quite complex
			hierarhy of elements.</listitem>
		    <listitem>Sockets are to be compatible in order to be connected.</listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Extension of</title>
		<itemizedlist>
		    <listitem><xref linkend="uc_03"/></listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Extended by</title>
		<itemizedlist>
		    <listitem><xref linkend="uc_011"/></listitem>
		</itemizedlist>
	    </sect3>
	</sect2>

	<sect2 id="uc_011"><title>UC_011 Extention of sockets</title>
	    <sect3><title>Description</title>
		CLIENT requests extending of some internal socket - SYSTEM extends the socket via proper extention point
		form of socket.
	    </sect3>
	    <sect3><title>Details</title>
		<itemizedlist>
		</itemizedlist>
	    </sect3>
	</sect2>

	<sect2 id="uc_012"><title>UC_012 CPs with no ifaces directly specified</title>
	    <sect3><title>Description</title>
		CLIENT: some element of system - also named "interface requestor".
		CLIENT requests SYSTEM for create some system that can provide several ifaces via one CP (so that CP can be used
		to connect to systems required different ifaces)
		- SYSTEM allows to create such system without specifying the particular provided iface (or spedifying the list of ifaces 
		provided)
	    </sect3>
	    <sect3><title>Details</title>
		<itemizedlist>
		    <listitem>This usecase allows to have dynamically configured system. One example is function "Add" that
			can handle different type of data - int, float, complex etc. It is possible to embed agent that suppports 
			all required ifaces, but we also need to CP allows such flexibility. </listitem>
		    <listitem>In this case CP can verify compatibility also "dynamically" using not prop with iface specified but
			asking system if the iface is supported</listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Extension of</title>
		<xref linkend="uc_03"/>
	    </sect3>
	    <sect3><title>Extended by</title>
		<itemizedlist>
		</itemizedlist>
	    </sect3>
	</sect2>

	<sect2 id="uc_013"><title>UC_013 Mutation</title>
	    <sect3><title>Actors</title>
		CLIENT: user of FAP model
	    </sect3>
	    <sect3><title>Precondition</title>
	    </sect3>
	    <sect3><title>Normal</title>
		CLIENT prepares specification of change in MODEL and requests MODEL for changing - MODEL performs the mutation and responce CLIENT of 
		mutation result
	    </sect3>
	    <sect3><title>Extended by</title>
		<itemizedlist>
		    <listitem><xref linkend="uc_014"/></listitem>
		    <listitem><xref linkend="uc_022"/></listitem>
		    <listitem><xref linkend="uc_018"/></listitem>
		    <listitem><xref linkend="uc_042"/></listitem>
		    <listitem><xref linkend="uc_044"/></listitem>
		</itemizedlist>
	    </sect3>
	</sect2>

	<sect2 id="uc_014"><title>UC_014 Trying of mutation</title>
	    <sect3><title>Actors</title>
		CLIENT: user of FAP model
	    </sect3>
	    <sect3><title>Precondition</title>
	    </sect3>
	    <sect3><title>Normal</title>
		CLIENT has some options of changing MODEL, CLIENT want to check if these options are valid for MODEL - MODEL provides
		means of checking the validity of changes.
	    </sect3>
	    <sect3><title>Alternative</title>
	    </sect3>
	    <sect3><title>Exceptions</title>
	    </sect3>
	    <sect3><title>Extends</title>
		<itemizedlist>
		    <listitem><xref linkend="uc_013"/></listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Extended by</title>
	    </sect3>
	    <sect3><title>Discussion</title>
		<itemizedlist>
		    <listitem>Example of this UC is studio application that uses model and allows user to create and change it. User for instance
			can create system with childs inside plus edge. Then user can try to connect the edge to some elements. So user pull the connection 
			point of the edge thru the list of the elements whereas the application shows to the user if the element is sutable for connection. 
			So the container element should give to application some mechanism to try connection and verify if it would be ok.</listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Clarification</title>
	    </sect3>
	</sect2>

	<sect2 id="uc_015"><title>UC_015 Edges correcting when removing vert</title>
	    <sect3><title>Actors</title>
		VERT: some vertex witin upper node.
		EDGE: edge 
		UPPER_NODE: node that contains VERT and EDGE
	    </sect3>
	    <sect3><title>Preconditions</title>
		EDGE is connected to VERT
	    </sect3>
	    <sect3><title>Normal</title>
		<simpara>Mutation of UPPER_NODE is done that removes VERT, UPPER_NODE disconnects EDGE from VERT so that connection point previously 
		connected to VERT gets free.</simpara>
	    </sect3>
	    <sect3><title>Extends</title>
		<xref linkend="uc_015"/>
	    </sect3>
	    <sect3><title>Extended by</title>
	    </sect3>
	</sect2>

	<sect2 id="uc_016"><title>UC_016 Node containing spec keeping all mutations</title>
	    <sect3><title>Actors</title>
		CLIENT: some subject using system.
		NODE: some node of system
	    </sect3>
	    <sect3><title>Normal</title>
		<simpara>CLIENT requests NODE for some series of mutations. NODE performs mutation and stores the mutation series in nodes spec. </simpara>
	    </sect3>
	    <sect3><title>Extends</title>
		<itemizedlist>
		    <listitem><xref linkend="uc_002"/></listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Extended by</title>
	    </sect3>
	    <sect3><title>Discussion</title>
		<orderedlist>
		    <listitem>The current implementation (332ab196bc0988f1e471ebfa708f44310b5f9f94) doesn't conform to this usecase. This is because the node deletion 
		   mutation isn't kept in spec. Instead of this the runtime node removes and also removes its spec, so the parent spec gets missing this child spec. </listitem>
		</orderedlist>
	    </sect3>
	</sect2>

	<sect2 id="uc_018"><title>UC_018 Adding node</title>
	    <sect3><title>Actors</title>
		CLIENT: some subject using system.
		NODE: some node of system
	    </sect3>
	    <sect3><title>Normal</title>
		<simpara>CLIENT requests NODE for mutation by adding the node basing on given parent - NODE performs the mutation </simpara>
	    </sect3>
	    <sect3><title>Extends</title>
		<itemizedlist>
		    <listitem><xref linkend="uc_017"/></listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Extended by</title>
		<itemizedlist>
		    <listitem><xref linkend="uc_019"/></listitem>
		    <listitem><xref linkend="uc_029"/></listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Discussion</title>
		<orderedlist>
		</orderedlist>
	    </sect3>
	</sect2>

	<sect2 id="uc_019"><title>UC_019 Nodes spec not containing parents spec</title>
	    <sect3><title>Actors</title>
		CLIENT: some subject using system.
		PARENT: some parent node within the system
		NODE: some node of system
		CHILD: node created basing on PARENT
	    </sect3>
	    <sect3><title>Normal</title>
		<simpara>CLIENT requests NODE for mutation by adding the node basing on PARENT - NODE performs the mutation so creates new CHILD basing on PARENT, 
		    NODE doens't include PARENTs spec into CHILDs spec.</simpara>
	    </sect3>
	    <sect3><title>Extends</title>
		<itemizedlist>
		    <listitem><xref linkend="uc_018"/></listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Extended by</title>
	    </sect3>
	    <sect3><title>Discussion</title>
		<orderedlist>
		    <listitem>This has serious consequences when building DES. For instance the case discovered when using DES Studio app: parent has some internal node named "Int_Node", 
			then we create CHILD basing on that parent. From Studio we can the whole run-time structure of child, so we can see that child contains node named "Int_Node".
			Then we open this "Int_Node" and try to mutate it somehow. As result we can see the mutation in Studio (i.e in DES run-time structure) but when we check
			the spec we cannot see the mutation we did. This is because the "Int_Node" spec is not included ("attached") to CHILDs spec thus isn't stored.</listitem>
		    <listitem>This specific means that we need to keep all parents "alive". If some parent is deleted that it will be not possible 
			to inherit even from the parent's child.</listitem>
		</orderedlist>
	    </sect3>
	</sect2>

	<sect2 id="uc_022"><title>UC_022 Mutation: renaming node</title>
	    <sect3><title>Actors</title>
		CLIENT: some element of system
	    </sect3>
	    <sect3><title>Preconditions</title>
	    </sect3>
	    <sect3><title>Assumptions</title>
	    </sect3>
	    <sect3><title>Normal</title>
		<simpara>CLIENT requests NODE for mutation by renaming the node basing on given parent - NODE performs the mutation </simpara>
	    </sect3>
	    <sect3><title>Alternative</title>
		<simpara>Alternative flows</simpara>
	    </sect3>
	    <sect3><title>Exceptions</title>
	    </sect3>
	    <sect3><title>Variations</title>
	    </sect3>
	    <sect3><title>Extends</title>
		<xref linkend="uc_013"/>
	    </sect3>
	    <sect3><title>Extended by</title>
		<itemizedlist>
		    <listitem><xref linkend="uc_024"/></listitem>
		    <listitem><xref linkend="uc_028"/></listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Discussion</title>
	    </sect3>
	    <sect3><title>Clarification</title>
	    </sect3>
	</sect2>

	<sect2 id="uc_024"><title>UC_024 Mutation: node references correcting when renaming node</title>
	    <sect3><title>Actors</title>
		NODE: some node within UPPER_NODE
		VERT: some vertex witin upper node.
		EDGE: edge 
		UPPER_NODE: node that contains VERT and EDGE
	    </sect3>
	    <sect3><title>Preconditions</title>
		Some references to NODE are specified in SYSTEM spec
	    </sect3>
	    <sect3><title>Assumptions</title>
	    </sect3>
	    <sect3><title>Normal</title>
		<simpara>Mutation is done that renames NODE, SYSTEM corrects the node refereces.</simpara>
	    </sect3>
	    <sect3><title>Alternative</title>
		<simpara>Alternative flows</simpara>
	    </sect3>
	    <sect3><title>Exceptions</title>
	    </sect3>
	    <sect3><title>Variations</title>
	    </sect3>
	    <sect3><title>Extends</title>
		<xref linkend="uc_022"/>
	    </sect3>
	    <sect3><title>Extended by</title>
	    </sect3>
	    <sect3><title>Discussion</title>
		<simpara>Example: Mutation of UPPER_NODE is done that renames VERT, UPPER_NODE updates EDGE so that connection point previously 
		connected to VERT remains correct.</simpara>
	    </sect3>
	    <sect3><title>Clarification</title>
	    </sect3>
	</sect2>

	<sect2 id="uc_028"><title>UC_028 Mutation, renaming: preventing unappropriate mutation</title>
	    <sect3><title>Actors</title>
		NODE: some node within UPPER_NODE
		REF_NODE: some node that is referring to NODE
	    </sect3>
	    <sect3><title>Preconditions</title>
		Some references to NODE are specified in SYSTEM spec for REF_NODE
	    </sect3>
	    <sect3><title>Assumptions</title>
	    </sect3>
	    <sect3><title>Normal</title>
		<simpara>CLIENT requests NODE renaming mutation that can invalidate SYSTEM, SYSTEM denies the mutation and indicates the error</simpara>
	    </sect3>
	    <sect3><title>Alternative</title>
		<simpara>Alternative flows</simpara>
	    </sect3>
	    <sect3><title>Exceptions</title>
	    </sect3>
	    <sect3><title>Variations</title>
	    </sect3>
	    <sect3><title>Extends</title>
		<xref linkend="uc_022"/>
	    </sect3>
	    <sect3><title>Extended by</title>
		<itemizedlist>
		    <listitem> <xref linkend="uc_037"/> </listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Discussion</title>
		<itemizedlist>
		    <listitem> Unappropriate renaming may be in case if REF_NODE has lower range (later mutation) that the owner of NODE. So if the renaming 
			mutation is applied to the owner of NODE the mutation itself will be higher range than REF_NODE, i.e. the error occurs when recreating the system, 
			because the mutation will be done first and then creation of REF_NODE.  </listitem>
		    <listitem>20140615 The mechanism of avoiding unappropriate mutation is to track dependncies of the mutations and apply new mutation only after the dependency with
			major rank</listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Clarification</title>
	    </sect3>
	</sect2>

	<sect2 id="uc_025"><title>UC_025 Consistency of mutations sequence by serialization</title>
	    <sect3><title>Actors</title>
		CLIENT: some user of the system.
	    </sect3>
	    <sect3><title>Preconditions</title>
	    </sect3>
	    <sect3><title>Assumptions</title>
	    </sect3>
	    <sect3><title>Normal</title>
		<simpara>CLIENT initiates the series of mutation of SYSTEM, CLIENT serializes the mutated system, CLIENT re-creates SYSTEM from serialized spec - SYSTEM is created consiststently, applying 
		all the mutation in right sequence.</simpara>
	    </sect3>
	    <sect3><title>Alternative</title>
		<simpara>Alternative flows</simpara>
	    </sect3>
	    <sect3><title>Exceptions</title>
	    </sect3>
	    <sect3><title>Variations</title>
	    </sect3>
	    <sect3><title>Extends</title>
		<xref linkend="uc_023"/>
	    </sect3>
	    <sect3><title>Extended by</title>
		<itemizedlist>
		    <listitem></listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Discussion</title>
		<sect4 id="uc_025_disc_notsec"><title>Not secured in current implementation</title>
		    <simpara>The case is not trivial in fact. The current implementation doesn't secure this behavior. Let's consider the sequence of mutations: </simpara>
		    <programlisting>
			1. creating Node A 
			2. including Node A_1 into node A
			3. some construction of A_1
			4. creating in A node A_2 inherited from A_1
			5. some changes in A_2 that depends on parents structure
			6. changing something in A_1 that was the dependencies when changing A_2 (per previous item)
			serializing
			de-serializing
		    </programlisting>
		    <simpara>In result some errors will be occur on de-serializing. This is because mutation #6 can go directly to A_1 chromo (this is current behavior of Studio App) 
			and A_1 is creating first including mutation per item #5, then A_2, but some structure of A_2 
			parent (A_1) that is used by #5. In other word currently the initial sequence of mutations are changed via serialization.
			So applying mutation #6 locally to A_1 chromo breaks the correct mutation sequence.</simpara>
		    <simpara>The possible solution would be applying mutations on upper level in this situation instead of locally to A_1</simpara>
		</sect4>
	    </sect3>
	    <sect3><title>Clarification</title>
	    </sect3>
	</sect2>

	<sect2 id="uc_026"><title>UC_026 Mutation: referencing to nodes</title>
	    <sect3><title>Actors</title>
		CLIENT: some user of system.
	    </sect3>
	    <sect3><title>Preconditions</title>
	    </sect3>
	    <sect3><title>Assumptions</title>
	    </sect3>
	    <sect3><title>Normal</title>
		<simpara>CLIENT requested some mutation, CLIENT referenced to some node as mutation spec paremeter - SYSTEM resolved the reference spec and uses the node references in the mutation.</simpara>
	    </sect3>
	    <sect3><title>Alternative</title>
	    </sect3>
	    <sect3><title>Exceptions</title>
	    </sect3>
	    <sect3><title>Variations</title>
	    </sect3>
	    <sect3><title>Extends</title>
		<xref linkend="uc_017"/>
	    </sect3>
	    <sect3><title>Extended by</title>
		<itemizedlist>
		    <listitem><xref linkend="uc_027"/></listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Discussion</title>
	    </sect3>
	    <sect3><title>Clarification</title>
	    </sect3>
	</sect2>

	<sect2 id="uc_027"><title>UC_027 Mutation: referencing to nodes: implicit URI</title>
	    <sect3><title>Actors</title>
		CLIENT: some user of system.
	    </sect3>
	    <sect3><title>Preconditions</title>
	    </sect3>
	    <sect3><title>Assumptions</title>
	    </sect3>
	    <sect3><title>Normal</title>
		<simpara>CLIENT requested some mutation, CLIENT referenced to some node as mutation spec paremeter using implicit URI - SYSTEM resolved the reference spec and uses the node references in the mutation.</simpara>
	    </sect3>
	    <sect3><title>Alternative</title>
	    </sect3>
	    <sect3><title>Exceptions</title>
	    </sect3>
	    <sect3><title>Variations</title>
	    </sect3>
	    <sect3><title>Extends</title>
		<xref linkend="uc_026"/>
	    </sect3>
	    <sect3><title>Extended by</title>
		<itemizedlist>
		    <listitem></listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Discussion</title>
		<simpara>This use case is applicable when specifying for instance parent node for new node creation mutation, when CLIENT doesn't know the location of parent node in native hier but knows 
		    parent's type only. For instance if CLIENT creates new node based on parent from component of some module. So CLIENT specifies only URI with type. SYSTEM has to be able to find parent
		    by this implicit URI</simpara>
	    </sect3>
	    <sect3><title>Clarification</title>
	    </sect3>
	</sect2>

	<sect2 id="uc_029"><title>UC_029 Mutation: creating node: missing parent in parents chain because of parent deleted</title>
	    <sect3><title>Actors</title>
		CLIENT: some user of system.
		NODE: some node within systems native hierarchy
		PARENT_NODE: node that specified as parent for creation node mutation
	    </sect3>
	    <sect3><title>Preconditions</title>
		PARENT_NODE doen't have the whole parents chain. Some parent in chain is missing, e.g deleted.
	    </sect3>
	    <sect3><title>Assumptions</title>
	    </sect3>
	    <sect3><title>Normal</title>
		<simpara>CLIENT requested mutation of adding node into NODE, the mutation contaings reference to some PARENT_NODE as parent for this mutation
		    - SYSTEM adds node irrespective that there is no the whole parents chain for creation node.</simpara>
	    </sect3>
	    <sect3><title>Alternative</title>
	    </sect3>
	    <sect3><title>Exceptions</title>
	    </sect3>
	    <sect3><title>Variations</title>
	    </sect3>
	    <sect3><title>Extends</title>
		<xref linkend="uc_018"/>
	    </sect3>
	    <sect3><title>Extended by</title>
		<itemizedlist>
		    <listitem></listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Discussion</title>
		<simpara>Currnet implementation (on 21-Feb-2014) supports creation node only if the complete parents chain exists. But often can be the case when some parent in the
		chain is deleted. In this case the system has to attach the whole deleting parents chromo to the child so the child posesses the complete chromo and can create the heir.</simpara>
	    </sect3>
	    <sect3><title>Clarification</title>
	    </sect3>
	</sect2>

	<sect2 id="uc_030"><title>UC_030 Mutation: creating node: missing parents outer mutations</title>
	    <sect3><title>Actors</title>
		CLIENT: some user of system.
		NODE: some node within systems native hierarchy
		PARENT_NODE: node that specified as parent for creation node mutation
	    </sect3>
	    <sect3><title>Preconditions</title>
		PARENT_NODE was mutated by some outer mutation, i.e. mutation that are placed not in PARENT_NODE itself but in some owners chromo. This 
		outer mutation can be reasoned for instance by the securing systems consistency.
	    </sect3>
	    <sect3><title>Assumptions</title>
	    </sect3>
	    <sect3><title>Normal</title>
		<simpara>CLIENT requested mutation of adding node into NODE, the mutation contaings reference to PARENT_NODE as parent for this mutation
		    - SYSTEM adds node and the outer mutations of PARENT_NODE are not included to nodes chromo.</simpara>
	    </sect3>
	    <sect3><title>Alternative</title>
	    </sect3>
	    <sect3><title>Exceptions</title>
	    </sect3>
	    <sect3><title>Variations</title>
	    </sect3>
	    <sect3><title>Extends</title>
		<xref linkend="uc_018"/>
	    </sect3>
	    <sect3><title>Extended by</title>
		<itemizedlist>
		    <listitem></listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Discussion</title>
		<simpara>This usecase shows that outer mutation cannot be considered as part of genotype because they doesn't affect parents chromo but only parent run-time object, i.e phenotype.</simpara>
	    </sect3>
	    <sect3><title>Clarification</title>
	    </sect3>
	</sect2>

	<sect2 id="uc_031"><title>UC_031 Mutation: creating node: missing parent in parents chain because of parent renamed</title>
	    <sect3><title>Actors</title>
		CLIENT: some user of system.
		NODE: some node within systems native hierarchy
		PARENT: node that specified as parent for creation node mutation
		SUB_PARENT: parent of PARENT
	    </sect3>
	    <sect3><title>Preconditions</title>
		SUB_PARENT is renamed
	    </sect3>
	    <sect3><title>Assumptions</title>
	    </sect3>
	    <sect3><title>Normal</title>
		<simpara>CLIENT requested mutation of adding node into NODE, the mutation contaings reference to PARENT as parent for this mutation
		    - SYSTEM adds node irrespective that there is no the whole parents chain for creation node.</simpara>
	    </sect3>
	    <sect3><title>Alternative</title>
	    </sect3>
	    <sect3><title>Exceptions</title>
	    </sect3>
	    <sect3><title>Variations</title>
	    </sect3>
	    <sect3><title>Extends</title>
		<xref linkend="uc_018"/>
	    </sect3>
	    <sect3><title>Extended by</title>
		<itemizedlist>
		    <listitem></listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Discussion</title>
	    </sect3>
	    <sect3><title>Clarification</title>
	    </sect3>
	</sect2>

	<sect2 id="uc_032"><title>UC_032 Mutation: moving node</title>
	    <sect3><title>Actors</title>
		<itemizedlist>
		    <listitem> CLIENT: some element of system </listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Preconditions</title> </sect3>
	    <sect3><title>Assumptions</title> </sect3>
	    <sect3><title>Normal</title>
		<simpara>CLIENT requests NODE for mutation by moving the node A into node B - SYSTEM performs the mutation if doesn't face limitation of this. </simpara>
	    </sect3>
	    <sect3><title>Alternative</title> <simpara>Alternative flows</simpara> </sect3>
	    <sect3><title>Exceptions</title> </sect3>
	    <sect3><title>Variations</title> </sect3>
	    <sect3><title>Extends</title>
		<xref linkend="uc_017"/>
	    </sect3>
	    <sect3><title>Extended by</title> 
		<itemizedlist>
		    <listitem><xref linkend="uc_033"/></listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Discussion</title> </sect3>
	    <sect3><title>Clarification</title> </sect3>
	</sect2>

	<sect2 id="uc_033"><title>UC_033 Mutation: moving node: local nodes</title>
	    <sect3><title>Actors</title>
		<itemizedlist>
		    <listitem> CLIENT: some element of system </listitem>
		    <listitem> NODE: some node within the native hier of system</listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Preconditions</title> </sect3>
	    <sect3><title>Assumptions</title> </sect3>
	    <sect3><title>Normal</title>
		<simpara>CLIENT request system to mutate NODE by moving NODEs component A into NODEs component B - SYSTEM performs the mutation if doesn't face limitation of this. </simpara>
	    </sect3>
	    <sect3><title>Alternative</title> <simpara>Alternative flows</simpara> </sect3>
	    <sect3><title>Exceptions</title> </sect3>
	    <sect3><title>Variations</title> </sect3>
	    <sect3><title>Extends</title>
		<xref linkend="uc_032"/>
	    </sect3>
	    <sect3><title>Extended by</title>
		<itemizedlist>
		    <listitem><xref linkend="uc_034"/></listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Discussion</title> 
		<simpara>Moving of node is not "pure" mutation but combination of adding the "copy" of node A into node B and removing inital A node.</simpara>
	    </sect3>
	    <sect3><title>Clarification</title>
	    </sect3>
	</sect2>

	<sect2 id="uc_034"><title>UC_034 Mutation: moving node: local nodes: considering of context change</title>
	    <sect3><title>Actors</title>
		<itemizedlist>
		    <listitem> CLIENT: some element of system </listitem>
		    <listitem> NODE: some node within the native hier of system</listitem>
		    <listitem> NODE_A, NODE_B: some components of NODE</listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Preconditions</title> 
		<simpara>NODE_A chromo contains context dependent references, for instance relative references.</simpara>
	    </sect3>
	    <sect3><title>Assumptions</title> </sect3>
	    <sect3><title>Normal</title>
		<simpara>CLIENT request system to mutate NODE by moving NODE_A into NODE_B - SYSTEM performs the mutation if doesn't face limitation of this, SYSTEM transforms context dependent 
		    references within NODE_A chromo properly. </simpara>
	    </sect3>
	    <sect3><title>Alternative</title> <simpara>Alternative flows</simpara> </sect3>
	    <sect3><title>Exceptions</title> </sect3>
	    <sect3><title>Variations</title> </sect3>
	    <sect3><title>Extends</title>
		<xref linkend="uc_033"/>
	    </sect3>
	    <sect3><title>Extended by</title> </sect3>
	    <sect3><title>Discussion</title> 
		<simpara>Moving of node is not "pure" mutation but combination of adding the "copy" of node A into node B and removing inital A node.</simpara>
	    </sect3>
	    <sect3><title>Clarification</title>
	    </sect3>
	</sect2>

	<sect2 id="uc_035"><title>UC_035 Mutation: moving node: remote nodes</title>
	    <sect3><title>Actors</title>
		<itemizedlist>
		    <listitem> CLIENT: some element of system </listitem>
		    <listitem> NODE: some node within the native hier of system</listitem>
		    <listitem> REMOTE_NODE: some node specified outside root ot NODE</listitem>
		    <listitem> NODE_B: some component of NODE</listitem>
		    <listitem> NODE_A: some component of REMOTE_NODE</listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Preconditions</title> </sect3>
	    <sect3><title>Assumptions</title> </sect3>
	    <sect3><title>Normal</title>
		<simpara>CLIENT request system to mutate NODE by moving NODE_A to NODE_B - SYSTEM performs the mutation if doesn't face limitation of this. </simpara>
	    </sect3>
	    <sect3><title>Alternative</title> <simpara>Alternative flows</simpara> </sect3>
	    <sect3><title>Exceptions</title> </sect3>
	    <sect3><title>Variations</title> </sect3>
	    <sect3><title>Extends</title>
		<xref linkend="uc_032"/>
	    </sect3>
	    <sect3><title>Extended by</title>
		<itemizedlist>
		    <listitem><xref linkend="uc_034"/></listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Discussion</title> 
		<simpara>Moving of node is not "pure" mutation but simply adding the "copy" of node A into node B</simpara>
	    </sect3>
	    <sect3><title>Clarification</title>
	    </sect3>
	</sect2>

	<sect2 id="uc_036"><title>UC_036 Vusual representation hints</title>
	    <sect3><title>Actors</title>
		<itemizedlist>
		    <listitem> CLIENT: some application using system and representing it to USER</listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Preconditions</title> </sect3>
	    <sect3><title>Assumptions</title> </sect3>
	    <sect3><title>Normal</title>
		<simpara>CLIENT creates SYSTEM. USER request to modify visual representation of some part of SYSTEM (e.g. order of components, etc.). SYSTEM allows this change of representation,
		keeps the data of representation in SYSTEM scecification, so when CLIENT creates SYSTEM from specification next time, USER will see the updated representation.</simpara>
	    </sect3>
	    <sect3><title>Alternative</title> <simpara>Alternative flows</simpara> </sect3>
	    <sect3><title>Exceptions</title> </sect3>
	    <sect3><title>Variations</title> </sect3>
	    <sect3><title>Extends</title>
	    </sect3>
	    <sect3><title>Extended by</title>
		<itemizedlist>
		    <listitem></listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Discussion</title> 
		<simpara>The representation data can be conisdered as hint that system provides for representation. Client can interpret this data specifically. </simpara>
		<simpara>Should the data be agents itself and implemeted as part of system? It would be logically, because it would allow to support base system mechanisms like
		mutations, rollback, etc.</simpara>
	    </sect3>
	    <sect3><title>Clarification</title>
	    </sect3>
	</sect2>

	<sect2 id="uc_037"><title>UC_037 Mutation: correct mutation dependency in case of phenotypic modification.</title>
	    <sect3><title>Actors</title>
		<itemizedlist>
		    <listitem> CLIENT: some application using system</listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Preconditions</title> 
		<simpara>There is some node -N-a-. Node -N- has some component -N_n- (not necessarily direct component). 
		    There is some mutation -M_1- in node -N- that perform phenotypic modification in node -N_n-, 
		    particularly add new node -N_a~1- from parent -N_a-.</simpara>
	    </sect3>
	    <sect3><title>Assumptions</title> </sect3>
	    <sect3><title>Normal</title>
		<itemizedlist>
		    <listitem>CLIENT requests creating system from its spec. SYSTEM creates system, SYSTEM takes into account that there is dependency of node -N- mutation -M_1- on  
		    node -N_a-. </listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Alternative</title> <simpara>Alternative flows</simpara> </sect3>
	    <sect3><title>Exceptions</title> </sect3>
	    <sect3><title>Variations</title> </sect3>
	    <sect3><title>Extends</title>
	    </sect3>
	    <sect3><title>Extended by</title>
		<itemizedlist>
		    <listitem> <xref linkend="uc_028"/> </listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Discussion</title> 
		<simpara>Note: the dependency if from node -N- but not from created node -N_a~1-. This is because -N_a~1- is phenotype modification but real holder of mutation -M_1- is 
		node -N-</simpara>
	    </sect3>
	    <sect3><title>Clarification</title>
	    </sect3>
	</sect2>

	<sect2 id="uc_038"><title>UC_038 Mutation: correct mutation dependency for nodes inherited from parent.</title>
	    <sect3><title>Actors</title>
		<itemizedlist>
		    <listitem> CLIENT: some application using system</listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Preconditions</title> 
		<simpara>There is some node [NO] owning node [N~1] inherited (mutation [MI] from parent [N]. 
		    Node [N] has some component [N_n] (not necessarily direct component). 
		    There is some mutation [M_1] in node [NO] that perform phenotypic modification in node [N_n]. </simpara>
	    </sect3>
	    <sect3><title>Assumptions</title> </sect3>
	    <sect3><title>Normal</title>
		<itemizedlist>
		    <listitem>CLIENT requests SYSTEM for some mutation [M_1] of node [N0] in order to make phenotypic modification
			of node [N_n] (that is component of [N~1]. 
			SYSTEM perform mutaion, taking into account that there is dependency of node [N_n] from at least mutaions
			[MI] created [N~1]. So the mutaion [M_1] rank will be greater than [MI].</listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Alternative</title> <simpara>Alternative flows</simpara> </sect3>
	    <sect3><title>Exceptions</title> </sect3>
	    <sect3><title>Variations</title> </sect3>
	    <sect3><title>Extends</title>
	    </sect3>
	    <sect3><title>Extended by</title>
		<itemizedlist>
		    <listitem> <xref linkend="uc_028"/> </listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Discussion</title> 
		<simpara>Currently for the nodes inherited from parent the dependencies are not filled out at all.
		This needs to be added.</simpara>
	    </sect3>
	    <sect3><title>Clarification</title>
	    </sect3>
	</sect2>

	<sect2 id="uc_039"><title>UC_039 Customizing detail representation</title>
	    <sect3><title>Actors</title>
		<itemizedlist>
		    <listitem> USER: client of STUDIO</listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Preconditions</title> </sect3>
	    <sect3><title>Assumptions</title> </sect3>
	    <sect3><title>Normal</title>
		<itemizedlist>
		    <listitem>USER creates some model using STUDIO. USER opens some component of model in detail representation. USER requests studio to customize the representation.
		    STUDIO allows customizing, and stores the customization data in model, so the next time of opening model the same customization will be applied</listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Alternative</title> <simpara>Alternative flows</simpara> </sect3>
	    <sect3><title>Exceptions</title> </sect3>
	    <sect3><title>Variations</title> </sect3>
	    <sect3><title>Extends</title>
	    </sect3>
	    <sect3><title>Extended by</title>
		<itemizedlist>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Discussion</title> 
		<simpara>Note: the dependency if from node -N- but not from created node -N_a~1-. This is because -N_a~1- is phenotype modification but real holder of mutation -M_1- is 
		node -N-</simpara>
	    </sect3>
	    <sect3><title>Clarification</title>
		<sect4><title>What king of customization is supported</title>
		    <itemizedlist>
			<listitem>Order of components in a node</listitem>
		    </itemizedlist>
		</sect4>
	    </sect3>
	</sect2>

	<sect2 id="uc_040"><title>UC_040 Customizing of connection points, information stream</title>
	    <sect3><title>Actors</title>
		<itemizedlist>
		    <listitem> USER: client of SYSTEM</listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Preconditions</title> </sect3>
	    <sect3><title>Assumptions</title> </sect3>
	    <sect3><title>Normal</title>
		<itemizedlist>
		    <listitem>USER creates some model using SYSTEM. USER requests that connecion points used in model be customized in order to reflect information stream, for instance
			inputs, outputs, reqular. SYSTEM allows to customize connection points, so any client visualizing the structure of the model can show the direction of 
			informations transformation.</listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Alternative</title> <simpara>Alternative flows</simpara> </sect3>
	    <sect3><title>Exceptions</title> </sect3>
	    <sect3><title>Variations</title> </sect3>
	    <sect3><title>Extends</title> </sect3>
	    <sect3><title>Extended by</title> <itemizedlist> </itemizedlist> </sect3>
	    <sect3><title>Discussion</title> </sect3>
	    <sect3><title>Clarification</title> </sect3>
	</sect2>

	<sect2 id="uc_041"><title>UC_041 Undo and redo of mutations</title>
	    <sect3><title>Actors</title>
		<itemizedlist>
		    <listitem> USER: client of SYSTEM</listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Preconditions</title> </sect3>
	    <sect3><title>Assumptions</title> </sect3>
	    <sect3><title>Normal</title>
		<itemizedlist>
		    <listitem>USER creates some model using SYSTEM</listitem>
		    <listitem>USER makes some mutations in order to modify the model</listitem>
		    <listitem>USER realized that some of mutation made are erroneus</listitem>
		    <listitem>USER request SYSTEM to undo some last mutations, SYSTEM perfores mutations undo.</listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Alternative</title> <simpara>Alternative flows</simpara> </sect3>
	    <sect3><title>Exceptions</title> </sect3>
	    <sect3><title>Variations</title> </sect3>
	    <sect3><title>Extends</title> </sect3>
	    <sect3><title>Extended by</title> <itemizedlist> </itemizedlist> </sect3>
	    <sect3><title>Discussion</title> </sect3>
	    <sect3><title>Clarification</title> </sect3>
	</sect2>

	<sect2 id="uc_042"><title>UC_042 Chromosome updating via incremental mutations preferrably</title>
	    <sect3><title>Actors</title>
		<itemizedlist>
		    <listitem> USER: client of SYSTEM</listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Preconditions</title> 
		<itemizedlist>
		    <listitem>There is spec (chromo) of system to be created and run</listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Assumptions</title> </sect3>
	    <sect3><title>Normal</title>
		<itemizedlist>
		    <listitem>USER creates system from given chromo</listitem>
		    <listitem>USER makes some changes in order to modify the system</listitem>
		    <listitem>SYSTEM perfoms the changes preferrably via incremental mutations to chromo. Only
		    rear cases shoud be to do direct changing of chromo.</listitem>
		    <listitem>SYSTEM also allows USER to do operation of compacting (squeezing) chromo</listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Alternative</title> <simpara>Alternative flows</simpara> </sect3>
	    <sect3><title>Exceptions</title> </sect3>
	    <sect3><title>Variations</title> </sect3>
	    <sect3><title>Extends</title> 
		<itemizedlist>
		    <listitem><xref linkend="uc_013"/></listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Extended by</title> <itemizedlist> </itemizedlist> </sect3>
	    <sect3><title>Discussion</title> 
		<orderedlist>
		    <listitem>This is just the limitation that user must not edit chromo but only increment it. No 
			gene engineering here.</listitem>
		    <listitem>Let's consider the case: chromo contains creation node from remote parent, and this parent has
			been renamed. How to repair the system consistency via incremental mutation ? The only way seems to
		    create new node. The problem is that this node can include big hierarchy.</listitem>
		</orderedlist>
	    </sect3>
	    <sect3><title>Clarification</title> </sect3>
	</sect2>

	<sect2 id="uc_043"><title>UC_043 Chromosome applied as is</title>
	    <sect3><title>Actors</title>
		<itemizedlist>
		    <listitem> USER: client of SYSTEM</listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Preconditions</title> 
		<itemizedlist>
		    <listitem>There is spec (chromo) of system to be created and run</listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Assumptions</title> </sect3>
	    <sect3><title>Normal</title>
		<itemizedlist>
		    <listitem>USER creates system from given chromo</listitem>
		    <listitem>SYSTEM perfoms creating the system by applying given chromo</listitem>
		    <listitem>SYSTEM keeps given chromo in created system chromo after applying. Even erroneous mutations
		    in given chromo go to the system chromo</listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Alternative</title> <simpara>Alternative flows</simpara> </sect3>
	    <sect3><title>Exceptions</title> </sect3>
	    <sect3><title>Variations</title> </sect3>
	    <sect3><title>Extends</title> 
		<itemizedlist>
		    <listitem><xref linkend="uc_013"/></listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Extended by</title> <itemizedlist> </itemizedlist> </sect3>
	    <sect3><title>Discussion</title> 
		<orderedlist>
		    <listitem>The reason of this case is that when we use studio and recreate the system (after undo/redo or 
			run-stop) then we will see the different results in the log if we don't apply chromo as is but 
			filter out some mutations. Currently erroneous mutations are not go to systems chromo.</listitem>
		</orderedlist>
	    </sect3>
	    <sect3><title>Clarification</title> </sect3>
	</sect2>

	<sect2 id="uc_044"><title>UC_044 Restriction when mutation applying: disable indirect phenotypic modification</title>
	    <sect3><title>Actors</title>
		<itemizedlist>
		    <listitem> USER: client of SYSTEM</listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Preconditions</title> 
		<itemizedlist>
		    <listitem>There is spec (chromo) of system to be created and run.</listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Assumptions</title> </sect3>
	    <sect3><title>Normal</title>
		<itemizedlist>
		    <listitem>USER request the restriction mode of mutations applying: to disable indirect phenotypic
			modification. This means that only the mutation are considered correct in which the object specified
		    (ENa_MutNode) is the node containing the mut or this node unattached internal nodes.</listitem>
		    <listitem>USER request SYSTEM for creating system from given chromo.</listitem>
		    <listitem>SYSTEM perfoms creating the system by applying given chromo. SYSTEM checks the restriction
			mode when applying muts from the chromo. If the mut doesn't meat restriction, SYSTEM consider 
			mut as incorrect, doesn't apply it and indicates the error for the mut.</listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Alternative</title> <simpara>Alternative flows</simpara> </sect3>
	    <sect3><title>Exceptions</title> </sect3>
	    <sect3><title>Variations</title> </sect3>
	    <sect3><title>Extends</title> 
		<itemizedlist>
		    <listitem><xref linkend="uc_013"/></listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Extended by</title> <itemizedlist> </itemizedlist> </sect3>
	    <sect3><title>Discussion</title> 
		<orderedlist>
		    <listitem>The restrictions allows redicing of dependencies in the whole system chromo. </listitem>
		    <listitem>Probably SYSTEM should indicate the muts not met the restriction as warnings.</listitem>
		</orderedlist>
	    </sect3>
	    <sect3><title>Clarification</title> </sect3>
	</sect2>

	<sect2 id="uc_045"><title>UC_045 Hierarchies</title>
	    <sect3><title>Actors</title>
		<itemizedlist>
		    <listitem> USER: client of SYSTEM</listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Preconditions</title> </sect3>
	    <sect3><title>Assumptions</title> </sect3>
	    <sect3><title>Normal</title>
		<itemizedlist>
		    <listitem>USER request to create system via mutaion of adding agents </listitem>
		    <listitem>SYSTEM creates system. SYSTEM supports two generic kind of relation between agents: 
		    structural - "container-component" and hereditary - "parent-child".</listitem>
		<listitem>SYSTEM builds two generic hierarchies in the system: structural inducted by structural relations, and
		    inheritance, conducted by heriditary relation.</listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Alternative</title> <simpara>Alternative flows</simpara> </sect3>
	    <sect3><title>Exceptions</title> </sect3>
	    <sect3><title>Variations</title> </sect3>
	    <sect3><title>Extends</title> 
		<itemizedlist>
		    <listitem><xref linkend="uc_002"/></listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Extended by</title> <itemizedlist> </itemizedlist> </sect3>
	    <sect3><title>Discussion</title> 
		<orderedlist>
		    <listitem>Native agents, that are generated by environment supports hereditary relations only, so they are not
			embedded into structural hierarchy. To be more presize the agents theyself does support structural relation but the
		    relation is not used in the system.</listitem>
		</orderedlist>
	    </sect3>
	    <sect3><title>Clarification</title> </sect3>
	</sect2>

	<sect2 id="uc_046"><title>UC_046 Models invariant agaings chromo nodes order</title>
	    <sect3><title>Actors</title>
		<itemizedlist>
		    <listitem> USER: client of SYSTEM</listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Preconditions</title> </sect3>
	    <sect3><title>Assumptions</title> </sect3>
	    <sect3><title>Normal</title>
		<itemizedlist>
		    <listitem>USER prepares models chromo, where some node A is presenting. Node A contains subnodes A.1 .. A.n specified
			in native order 1, 2, ...</listitem>
		    <listitem>USER request SYSTEM for creating model from the given chromo</listitem>
		    <listitem>SYSTEM creates the model. SYSTEM doesn't simply follow the order of subnodes in node A but applies mutations
			A.1 .. A.n in order that secure correct all dependencies.</listitem>
		    <listitem>USER changes order of subnodes of node A and request SYSTEM to create another model</listitem>
		    <listitem>SYSTEM creates the model. The model gets the same as the initial model.</listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Alternative</title> <simpara>Alternative flows</simpara> </sect3>
	    <sect3><title>Exceptions</title> </sect3>
	    <sect3><title>Variations</title> </sect3>
	    <sect3><title>Extends</title> 
		<itemizedlist>
		    <listitem><xref linkend="uc_002"/></listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Extended by</title> <itemizedlist> </itemizedlist> </sect3>
	    <sect3><title>Discussion</title> 
		<orderedlist>
		    <listitem>Status of this usecase is just "PROPOSED". Needs confirmation of feasibility.</listitem>
		</orderedlist>
	    </sect3>
	    <sect3><title>Clarification</title> </sect3>
	</sect2>

	<sect2 id="uc_047"><title>UC_047 Logger Observer interface </title>
	    <sect3><title>Actors</title>
		<itemizedlist>
		    <listitem> USER: client of SYSTEM</listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Preconditions</title> 
		<itemizedlist>
		    <listitem>SYSTEM introduces Logger Oblserver interface</listitem>
		    <listitem>USER implements Logger Oblserver interface</listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Normal</title>
		<itemizedlist>
		    <listitem>USER prepares models chromo.</listitem>
		    <listitem>USER requests SYSTEM to register Logger Observer interface implementation as observer </listitem>
		    <listitem>USER requests SYSTEM for creating model from the chromo</listitem>
		    <listitem>SYSTEM creates the model. SYSTEM notifies USER of logger events via USER implementation of Logger Observer interface </listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Extends</title> 
		<itemizedlist>
		    <listitem><xref linkend="uc_001"/></listitem>
		</itemizedlist>
	    </sect3>
	</sect2>

	<sect2 id="uc_048"><title>UC_048 Logging Event</title>
	    <sect3><title>Actors</title>
		<itemizedlist>
		    <listitem> USER: client of SYSTEM</listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Preconditions</title> </sect3>
	    <sect3><title>Normal</title>
		<itemizedlist>
		    <listitem>USER prepares models chromo.</listitem>
		    <listitem>USER requests SYSTEM for creating model from the chromo</listitem>
		    <listitem>SYSTEM creates the model. SYSTEM record logging information as Logging Events.</listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Extends</title> 
		<itemizedlist>
		    <listitem><xref linkend="uc_001"/></listitem>
		</itemizedlist>
	    </sect3>
	    <sect3><title>Discussion</title>
		<itemizedlist>
		    <listitem>Logging Events includes the following information:
			<itemizedlist>
			    <listitem>Code</listitem>
			    <listitem>Message</listitem>
			    <listitem>Parameters</listitem>
			</itemizedlist>
		    </listitem>
		</itemizedlist>
	    </sect3>
	</sect2>

    </sect1>

</article>
